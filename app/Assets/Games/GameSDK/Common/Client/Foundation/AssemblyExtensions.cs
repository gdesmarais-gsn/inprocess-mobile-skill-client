using System;
using System.Reflection;
using System.Linq;

namespace GSN.Skill.Games.Common.Utils
{
	/// Extension methods to bridge between autogenerated ActionScript code and C#
	public static class AssemblyExtensions
	{
		public static Type GetTypeFrom(this Assembly assembly, string attributeName) 
		{
			Type[] dllTypes = null;	// array of Types

			Type retval = null;

			int i;

			try {

				dllTypes = assembly.GetTypes();

			}
			catch {
				GsnDebug.LogError (assembly.FullName, "needs these assemblies:");

				AssemblyName[] anames = assembly.GetReferencedAssemblies ();

				int count = anames.Count();

				for (i = 0; i < count; ++i) {
					GsnDebug.Log (anames [i].Name);
				}
				throw new Exception ("Can't get Types in Assembly");
			}

			string attName = attributeName + "Attribute";

			foreach ( Type t in dllTypes )
			{
				
				// Can't create it if it's not a class, or if it's abstract
				if (t.IsAbstract || !t.IsClass)
				{
					continue;
				}

				// Get the custom attributes to look for the attribute we want
				Object[] attribs = t.GetCustomAttributes(false);
				if ( attribs == null || attribs.Length == 0 )
				{
					continue;
				}

				// spin through the attributes of the Type
				for (i=0; i < attribs.Length; i++ )
				{
					if ( attribs[i].ToString().EndsWith(attName))
					{
						// Make sure we didn't find multiple things with this attribute
						if (retval != null)
						{
							GsnDebug.Log("Found two types in", assembly.FullName, "with the", attName,  
								retval.ToString(), "and", t.ToString());

							throw new Exception ("Duplicate " + attributeName +"s");

						}

						retval = t;
					}
				}	
			}

			if (retval == null) {
				throw new Exception ("Can't find the " + attributeName + " in " + assembly.FullName);
			}

			return retval;		

		}

	}
}