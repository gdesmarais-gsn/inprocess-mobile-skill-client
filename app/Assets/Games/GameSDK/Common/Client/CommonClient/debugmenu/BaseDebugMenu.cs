// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace GSN.Skill.Games.Common.Client.DebugMenu
{
    public abstract class BaseDebugMenu : MonoBehaviour 
    {
        public BaseDebugMenu()
        {
        }

		protected Rect windowRect;
		protected Vector4 margins;
        protected float _scale = 1;

		/// The color for label text.  Default is Cyan.  See AddLabel.
		public Color labelColor = Color.cyan;

		/// The color for data text.  Default is White.  See AddData.
		public Color dataColor  = Color.white;
		
		public delegate void OnScaledGUIFunc(float screenWidth, float screenHeight);

		/// This function will scale the UI appropriately.
		protected void DoScaledGUI(OnScaledGUIFunc func)
		{			
			DoScaledGUIInternal(func);
		}

		void OnEnable()
		{
			OnEnableInternal();
		}
		
		void OnGUI()
		{
			OnGUIInternal();
		}
        
		protected virtual void OnScaledGUI(float screenWidth, float screenHeight)
		{
			OnScaledGUIInternal( screenWidth, screenHeight );
		}

		/// Override this function in your debnug menu to get elements to draw.
		public abstract void OnWindow(int windowID);




#if DEBUG
			int windowId;

			protected void DoScaledGUIInternal(OnScaledGUIFunc func)
			{			
				if(func == null) 
	            {
					return;
				}
	            
				// mess with GUI.matrix to support retina devices better, this tries to make it relative in size
				Matrix4x4 origGuiMat = GUI.matrix;
	            
	            _scale = Screen.height /  (float)DebugMenu.NATIVE_SIZE;
				
	            if ( Screen.width > Screen.height )
	            {
	                _scale = Screen.width / (float)DebugMenu.NATIVE_SIZE;
	            }
	                        
	            GUI.matrix = Matrix4x4.TRS (Vector3.zero, Quaternion.identity, new Vector3 (_scale, _scale, 1)); 
	     
				func(Screen.width / _scale, Screen.height / _scale);
			}

			void OnEnableInternal()
			{
				margins = new Vector4(50,20,50,0);

				DoScaledGUI((screenWidth,screenHeight) => 
	            {
					windowRect = new Rect(margins.x,screenHeight/10,screenWidth - (2 * margins.x),screenHeight*8/20);
				});
			}
			
			void OnGUIInternal()
			{
				DoScaledGUI(OnScaledGUI);

				if(windowId == 0) {
					windowId = GUIUtility.GetControlID(FocusType.Passive);
				}
				
				windowRect = GUI.Window(windowId, windowRect, OnWindow, name);
			}
	        
			protected virtual void OnScaledGUIInternal(float screenWidth, float screenHeight)
			{
				if(windowRect.x > screenWidth - margins.x) { windowRect.x = screenWidth - margins.x; }
				if(windowRect.x < margins.z - windowRect.width) { windowRect.x = margins.z - windowRect.width; }
				if(windowRect.y > screenHeight - margins.y) { windowRect.y = screenHeight - margins.y; }
				if(windowRect.y < margins.w) { windowRect.y = margins.w; }
			}

			/// Add text to the UI using the labelColor.  This should be used for constant, static
			/// text like the text that describes some variable data or the title of a section 
			public virtual void AddLabel(string text, params GUILayoutOption [] options)
			{
				var old = GUI.color;
				GUI.color = labelColor;
				GUILayout.Label(text, options);
				GUI.color = old;
			}

			/// Add text to the UI using the dataColor.  In Unity terms, this is drawn
			/// as a label.  We make the distinction between Label and Data to have the later
			/// represent information that varies.  This should be used for text that
			/// changes based on a variable or represent the value of changing data.
			public virtual void AddData(string text, params GUILayoutOption [] options)
			{
				var old = GUI.color;
				GUI.color = dataColor;
				GUILayout.Label(text, options);
				GUI.color = old;
			}

#else
			protected void DoScaledGUIInternal(OnScaledGUIFunc func) {}
			void OnEnableInternal() {}
			void OnGUIInternal() {}
			protected virtual void OnScaledGUIInternal(float screenWidth, float screenHeight) {}
#endif

    }
}

